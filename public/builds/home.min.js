(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({"/home/runner/Multiverse/public/javascripts/home.js":[function(require,module,exports){
/* VARS */

//const THREE = require('three')
//const p5 = require('p5')

document.addEventListener("onConsoleError", (e) => {
  alert(e.detail.args)
});

console.error("lol")


// init null vars
let camera, scene, controls, renderer = null

function setup() {

  // Create the scene
  scene = new THREE.Scene();

  // Create and init the render
  renderer = new THREE.WebGLRenderer( { antialias: true } );
  renderer.setClearColor(/*'#333036'*/'#000000');
  renderer.setSize( window.innerWidth, window.innerHeight );

  // Create and init the camera
  camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 )
  camera.position.z = 5;

  // Create the orbitc controls
  controls = new THREE.OrbitControls( camera, renderer.domElement );

  // adds the render to the body
  document.body.appendChild( renderer.domElement );
}

function resizeRendererToDisplaySize(renderer) {
  const canvas = renderer.domElement;
  const width = canvas.clientWidth;
  const height = canvas.clientHeight;
  const needResize = canvas.width !== width || canvas.height !== height;
  if (needResize) {
    renderer.setSize(width, height, false);
  }
  return needResize;
}

// load skybox loader
{
  // creates the loader
  const loader = new THREE.TextureLoader();

  // load the 360 texture
  const texture = loader.load(
    '../assets/images/skyboxs/Milkyway_Galaxy_Skybox_Sphere_Map_8k.webp',
    () => {
      const rt = new THREE.WebGLCubeRenderTarget(texture.image.height);
      rt.fromEquirectangularTexture(renderer, texture);
      scene.background = rt.texture;
    });
}

function draw() {

  if (resizeRendererToDisplaySize(renderer)) {
    const canvas = renderer.domElement;
    camera.aspect = canvas.clientWidth / canvas.clientHeight;
    camera.updateProjectionMatrix();
  }

  controls.update();

  renderer.render(scene, camera);
}
},{}]},{},["/home/runner/Multiverse/public/javascripts/home.js"]);
